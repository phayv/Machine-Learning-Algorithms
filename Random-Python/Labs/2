# Phay Vong

print('-------------Problem 1-------------')

def abbreviate (month: str) -> str:
  return month[0]+month[1]+month[2]
assert abbreviate('January') == 'Jan'
assert abbreviate('abril') == 'abr'

print(abbreviate('February'))



print('-------------Problem 2-------------')
def find_area_square(n: int) -> int:
  return n*n
assert find_area_square(1) == 1
assert find_area_square(5) == 25

print(find_area_square(2))



print('-------------Problem 3-------------')
def find_area_circle(n: float) -> float:
  return 3.14159*(n*n)
assert find_area_circle(1) == 3.14159
assert find_area_circle(5) == 78.53975

print(find_area_circle(3))



print('-------------Problem 4-------------')
def print_even_numbers (l: list) -> int:
  for element in l:
    if element % 2 == 0:
      print(element)
    
print_even_numbers([1,2,3,4,5,6,7,8])



print('-------------Problem 5-------------')
def calculate_shipping (weight: float) -> float:
  if weight < 2:
    return 2.00
  elif weight < 10:
    return 5.00
  elif weight >= 10:
    difference = weight - 10
    cost = difference*1.50
    return 5+cost
  return 
assert calculate_shipping(1.5) == 2.00
assert calculate_shipping(7) == 5.00
assert calculate_shipping(15) == 12.50

print(calculate_shipping(1.9))



print('-------------Problem 6-------------')
import tkinter
my_window = tkinter.Tk() #created the window
my_canvas = tkinter.Canvas(my_window, width = 500, height = 500)#created a 500x500 size canvas
my_canvas.pack() #putting canvas into the created window earlier

def create_square(xcoor: float,ycoor: float, length: float):
  my_canvas.create_rectangle(xcoor - length/2, ycoor - length/2, xcoor + length/2, ycoor + length/2)
  
create_square(250,250,200)


  
print('-------------Problem 7-------------')
import tkinter
my_window = tkinter.Tk() #created the window
my_canvas = tkinter.Canvas(my_window, width = 500, height = 500)#created a 500x500 size canvas
my_canvas.pack() #putting canvas into the created window earlier

def create_circle(xcoord: float, ycoord: float, diameter: float):
  my_canvas.create_oval(xcoord - diameter/2, ycoord - diameter/2, xcoord + diameter/2, ycoord + diameter/2)

create_circle(250,250,200)



print('-------------Problem d1-------------')
from collections import namedtuple     # If this line is in your file already, you don't need it again
Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')
# Restaurant attributes: name, kind of food served, phone number, best dish, price of that dish

RC = [
    Restaurant("Thai Dishes", "Thai", "334-4433", "Mee Krob", 12.50),
    Restaurant("Nobu", "Japanese", "335-4433", "Natto Temaki", 5.50),
    Restaurant("Nonna", "Italian", "355-4433", "Stracotto", 25.50),
    Restaurant("Jitlada", "Thai", "324-4433", "Paht Woon Sen", 15.50),
    Restaurant("Nola", "New Orleans", "336-4433", "Jambalaya", 5.50),
    Restaurant("Noma", "Modern Danish", "337-4433", "Birch Sap", 35.50),
    Restaurant("Addis Ababa", "Ethiopian", "337-4453", "Yesiga Tibs", 10.50)]


def restaurant_price(Restaurant: str) -> float:
  return Restaurant.price

print(restaurant_price(RC[0]))
print(restaurant_price(RC[1]))
print(restaurant_price(RC[2]))
print(restaurant_price(RC[3]))
print(restaurant_price(RC[4]))
print(restaurant_price(RC[5]))
print(restaurant_price(RC[6]))



print('-------------Problem d2-------------')
RC.sort(key=restaurant_price)
print(RC)



print('-------------Problem d3-------------')
def costliest(restaurants: list) -> str:
  restaurants.sort(key=restaurant_price)
  return restaurants[-1].name

print(costliest(RC))



print('-------------Problem d4-------------')
def costliest2(restaurants: list) -> str:
  temp_list = sorted(restaurants, key=restaurant_price)
  return temp_list[-1].name

print(costliest2(RC))




print('-------------Problem e1-------------')
from collections import namedtuple

Book = namedtuple('Book', 'author title genre year price instock')

BSI = [Book("A Author", "First Book", "Mystery", 1999, 10.00, 0),
       Book("D Author", "Second Book", "Adventure", 2001, 11.00, 1),
       Book("E Author", "Third Book", "Science Fiction", 2002, 12.00, 2),
       Book("B Author", "Fourth Book", "Crime", 2003, 13.00, 3),
       Book("C Author", "Fifth Book", "Romance", 2004, 14.00, 4),
       Book("F Author", "Sixth Book", "Technology", 2005, 15.00, 5)]

for element in BSI:
  print(element.title)


print('-------------Problem e2-------------')
def book_title(books: list):
  return books.title

alphabet = sorted(BSI, key = book_title)

for element in alphabet:
  print(element.title)



print('-------------Problem e3-------------')
def price_change(books: list):
  for elements in books:
    newprice = elements.price*1.1
    elements = Book(elements.author, elements.title, elements.genre,
                    elements.year, newprice, elements.instock)

    
price_change(BSI)
print(BSI)

print('-------------Problem e4-------------')
for elements in BSI:
  if elements.genre == "Technology":
    print(elements.title)


print('-------------Problem e5-------------')
booksbefore2000 = []
booksafter2000 = []

for elements in BSI:
  if elements.year > 2000:
    booksafter2000.insert(0, elements.title)
  elif elements.year < 2000:
    booksbefore2000.insert(0, elements.title)

print('More titles 2000 or later', len(booksafter2000), 'vs', len(booksbefore2000))



print('-------------Problem e6-------------')
def inventory_value(book: str) -> float:
  value = book.price * book.instock
  return value
  
def top_value(books: list) -> str:
  oldvalue = 0
  for elements in books:
    intermediatevalue = oldvalue
    topvalue = inventory_value(elements)
    if intermediatevalue < topvalue:
      oldvalue = topvalue
      book = elements.title
    elif intermediatevalue > topvalue:
      oldvalue = intermediatevalue
      book = elements.title
  print('The highest value book is', book,)
  return elements.title
      
top_value(BSI)


print('-------------Problem f-------------')
import tkinter
my_window = tkinter.Tk() #created the window
my_canvas = tkinter.Canvas(my_window, width = 500, height = 500)
#created a 500x500 size canvas
my_canvas.pack() #putting canvas into the created window earlier




#HEAD
def draw_face(H: float):
  my_canvas.create_oval(H, H, 0, 0)


def draw_eyes(T: float):
#pupil
  my_canvas.create_oval(150-T, 150, 250-T, 250, fill = 'red')
#iris
  my_canvas.create_oval(175-T, 175, 225-T, 225, fill = 'black')

def draw_mouth(T: float):
  my_canvas.create_line(150, 400, 150+T, 400, fill = 'black')

def draw_nose(T: float):
  my_canvas.create_oval(190, 250, 200, 275, fill = 'yellow')





print(draw_face(500))
print(draw_eyes(100))
print(draw_eyes(-100))
print(draw_mouth(200))
print(draw_nose(100))
