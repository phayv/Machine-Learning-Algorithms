#Phay Vong 44973333 and Bowei Wang (boweiw@uci.edu) 41839087 Lab Section 3

from collections import namedtuple

Dish = namedtuple('Dish','name price calories')
''' creating nametuple called dish that contains the name price and calories of a dish '''


d1 = Dish("Pad Thai", 9.00, 900)
d2 = Dish("BBQ Chicken", 9.5, 950)
d3 = Dish("Ramen", 8.00, 800)
d4 = Dish("Beef", 10.00, 1000)
d5 = Dish("Salad", 8.50, 850)

d6 = Dish("Korean BBQ", 7.50, 750)
d7 = Dish("Rice", 7.00, 700)
d8 = Dish("Noodles", 11.00, 1100)
d9 = Dish("Crackers", 10.50, 1050)


def dish_str(d: Dish) -> str:
  return d.name+" "+"$"+str(d.price)+":"+" "+str(d.calories)

print(dish_str(d1))




print('-----problem c3------')
def dish_same(d:Dish, e:Dish) -> bool:
  '''take two dishes and returns true if the calories are the same and false if not'''
  return d.name == e.name and e.calories == d.calories
assert dish_same(d1,d3) == False
assert dish_same(d2,d3) == False

    
print(dish_same(d1,d2))



print('-----problem c4------')
def dish_change_price(d:Dish, n:float) -> Dish:
  '''takes a dish and a number and returns a dish with its price changed'''
  d = d._replace(price = d.price*(1+n/100))
  return d

print(dish_change_price(d1,-50))
print(dish_change_price(d1,100))



print('-----problem c5------')
def dish_is_cheap(d: Dish, n: float) -> bool:
  '''take a dish and a number and returns true if the dish price is less than the number and false otherwise'''
  return d.price < n

print(dish_is_cheap(d1,10))


print('-----problem c6------')
DL = [d1,d2,d3,d4,d5]
length = len(DL)
DL2 = [d6,d7,d8,d9]

DL.extend(DL2)
print(DL)

print('')
def dishlist_displace(l:list) -> str:
  '''this takes a list of dishes and returns all of them with new line'''
  result = ''
  for i in l:
    result += dish_str(i)+"\n"
  return result
      

print(dishlist_displace(DL))




print('-----problem c7------')
def dishlist_all_cheap(l:list, n:float) -> bool:
  '''takes a list of dishes and a number and returns true if the price of every dish on the list is less than the number'''
  for i in l:
    if dish_is_cheap(i,n):
      continue
    else:
      return dish_is_cheap(i,n)
  return dish_is_cheap(l[-1],n)


print(dishlist_all_cheap(DL,12))
print(dishlist_all_cheap(DL,10))
  

print('-----problem c8------')
def dishlist_change_price(l:list,n:float)->list:
  '''takes a list of dishes and a number and returns a list of dishes that had their price changed by n'''
  result = []
  for i in l:
    d = dish_change_price(i,n)
    result.append(d)
  return result


print(dishlist_change_price(DL,100))




print('-----problem c9------')
def dishlist_prices(l:list)->list:
  '''takes a list of dishes and returns a list of numbers that are the prices of the dishes'''
  result = []
  for i in l:
    d = i.price
    result.append(d)
  return result

print(dishlist_prices(DL))




print('-----problem c10------')
def dishlist_average(l:list)->float:
  '''takes a list of of prices from a list and returns the average price'''
  return sum(dishlist_prices(l)) / len(l)

print(dishlist_average(DL))




print('-----problem c11------')
def dishlist_keep_cheap(l:list,n:float)->list:
  result = []
  for i in l:
    if dish_is_cheap(i,n):
      result.append(i)
    else:
      continue
  return result

print(dishlist_keep_cheap(DL,12))
print(dishlist_keep_cheap(DL,10))




print('-----problem c12------')
d10 = Dish("1", 9.00, 900)
d11 = Dish("2", 9.5, 950)
d12 = Dish("3", 8.00, 800)
d13 = Dish("4", 10.00, 1000)
d14 = Dish("5", 8.50, 850)
d15 = Dish("6", 7.50, 750)
d16 = Dish("7", 7.00, 700)
d17 = Dish("8", 11.00, 1100)
d18 = Dish("9", 10.50, 1050)
d19 = Dish("10", 9.00, 900)
d20 = Dish("11", 9.5, 950)
d21 = Dish("12", 8.00, 800)
d22 = Dish("13", 10.00, 1000)
d23 = Dish("14", 8.50, 850)
d24 = Dish("15", 7.50, 750)
d25 = Dish("16", 7.00, 700)


BDL = [d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25]

def before_and_after():
  percentage = float(input("What is the percentage change in price:"))
  print(dishlist_displace(BDL))
  
  dishlist_change_price(BDL,percentage)

  print(dishlist_displace(BDL))

before_and_after()






print('-----problem e1------')
Restaurant = namedtuple('Restaurant', 'name cuisine phone menu')

r1 = Restaurant('Thai Dishes', 'Thai', '334-4433', [Dish('Mee Krob', 12.50, 500),
                                                    Dish('Larb Gai', 11.00, 450)])

r2 = Restaurant('Taillevent', 'French', '01-44-95-15-01', 
				[Dish('Homard Bleu', 45.00, 750),
				 Dish('Tournedos Rossini', 65.00, 950),
				 Dish("Selle d'Agneau", 60.00, 850)])	

r3 = Restaurant('Pascal','French','940-752-0107',[Dish('Escargots', 12.95, 250),
                                                  Dish('Poached Salmon', 18.50, 550),
                                                  Dish('Rack of Lamb', 24.00, 850),
                                                  Dish('Marjolaine Cake', 8.50, 950)])


#Dish = namedtuple('Dish','name price calories')

print('-----problem e2------')
def restaurant_first_dish_name(r: Restaurant) -> Dish:
  return r.menu[0]

print(restaurant_first_dish_name(r1))

print('-----problem e3------')
def restaurant_is_cheap(r: Restaurant, n: float) -> bool:
  return dishlist_average(r.menu) < n

print(restaurant_is_cheap(r1,100))

print('-----problem e4------')
def dish_raise_price(d: Dish) -> Dish:
  d = d._replace(price = d.price + 2.50)
  return d

def menu_raise_price(m : Restaurant)->list:
  result = []
  for d in m.menu:
    d = dish_raise_price(d)
    result.append(d)
  return result
  
def restaurant_raise_price(i:Restaurant)->Restaurant:
  '''takes a list of dishes and a number and returns a list of dishes that had their price changed by n'''
  return menu_raise_price(i)

C = [r1,r2,r3]

def collection_raise_prices(l: list)-> list:
  result = []
  for i in l:
    i = restaurant_raise_price(i)
    result.append(i)
  return result


D = collection_raise_prices(C)
print(D)



print('-----problem e5------')
def collection_select_cheap(l: list, n: float) -> list:
  result = []
  for i in l:
    if restaurant_is_cheap(i,n):
      result.append(i)
  return result

print(collection_select_cheap(C,12.50))





Count = namedtuple("Count","letter number")

def letter_count(s1: str, s2: str) -> Count:
  result = []
  alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWYZ'
  
  for i in s2:
    amt = 0
    if i in alphabet:
      for m in s1:
        if m == i:
          amt += 1
      add = Count(i,amt)  
      result.append(add)
  return result

                
print(letter_count('happy123', 'hap'))
