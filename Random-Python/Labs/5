# Phay Vong

print('---------Problem C1---------')
def contains(s1:str,s2:str) -> bool:
  return s2 in s1

assert contains('banana', 'ana')
assert not contains('racecar', 'ck')

print(contains('assurance','sur'))


print('---------Problem C2---------')
def punctuation(s:str)->str:
  a = '!@#$%^&*()_+-+[{]}\|;:,<.>?/'
  result = ''
  for i in s:
    if i in a:
      continue
    else:
      result = result + i
  return result

      
def sentence_stats(s:str):
  print('Characters: ', len(s))
  
  words = s.count(' ')+1   

  print('Words: ', words)
  print('Average word length: ', len(s)/words)

print(sentence_stats('hi there'))


print('---------Problem C3---------')
def initials(s:str) -> str:
  result = ''
  words = s.split()
  for i in words:
    result = result + i[0]
  return result

assert initials('Bill Cosby') == 'BC'

print(initials('Phay Vong'))










print('---------Problem D1---------')
from random import randrange

for i in range(0,50):
  print(randrange(0,11))
  

print('---------Problem D2---------')
def roll2dice() -> int:
  return randrange(1,7)+randrange(1,7)  

for i in range(50): 
  print(roll2dice())


print('---------Problem D3---------')
def distribution_of_rolls(n:int):
  l = []
  m = []
  for i in range(n):
    l.append(roll2dice())
  for j in range(2,13):
    number = l.count(j)
    percentage = (number/n)*100
    print("{:2}: {:2} ({:5.2f}%): {:}".format(j, number, percentage, '*'*number))
    m.append(number)
  
    
distribution_of_rolls(200)
  




print('---------Problem E1---------')

ALPHABET ='abcdefghijklmnopqrstuvwxyz'

def rotated_alphabet(alphabet: str,i: int):
  return alphabet[i:]+alphabet[:i]  

def caesar_encrypt(s: str,i: int) -> str:
  m = i % 25
  newalphabet = rotated_alphabet(ALPHABET,m)
  result = ''
  for j in s:
    if j in ALPHABET:
      p = ALPHABET.find(j)
      result = result + newalphabet[p]
    else:
      result += j
  return result

def caesar_decrypt(s: str,i: int) -> str:
  m = i % 25
  newalphabet2 = rotated_alphabet(ALPHABET,-m)
  result = ''
  for j in s:
    if j in ALPHABET:
      p = ALPHABET.find(j)
      result = result + newalphabet2[p]
    else:
      result += j
  return result
    

encryptedmessage = caesar_encrypt('hi there', 114)
print(encryptedmessage)
print(caesar_decrypt(encryptedmessage, 114))







print('---------Problem F---------')

words = ["Four score and seven years ago, our fathers brought forth on",
  "this continent a new nation, conceived in liberty and dedicated",
  "to the proposition that all men are created equal.  Now we are",
  "   engaged in a great 		civil war, testing whether that nation, or any",       
  "nation so conceived and so dedicated, can long endure.        "]



print('---------Problem F1---------')
def print_line_numbers(l:list):
  m = 0
  for i in l:
    m += 1
    print("{:5}: {:50}".format(m,i))
        

print_line_numbers(words)



print('---------Problem F2---------')
def stats(l:list):
  m = len(l) #lines in the list
  numofchar = 0
  emptylines = 0
  for i in l: #finds the number of characters in the entire list
    if len(i) == 0: #empty line
        emptylines += 1
    numofchar += len(i)    
  average_characters_per_line = numofchar/m 
  average_characters_per_nonempty_line = numofchar/(m - emptylines)  #number of lines minus empty
  
  print("{:4}   lines in the list".format(m))
  print("{:4}   empty lines".format(emptylines))
  print("{:6} averge characters per line".format(average_characters_per_line))
  print("{:6} average characters per non-empty line".format(average_characters_per_nonempty_line))

stats(words)


print('---------Problem F3---------')
def list_of_words(l: list) -> list:
  '''takes out all the white space and punctations'''
  newlist = []
  result = []
  for i in l:
    newlist = newlist + i.split()
  for j in newlist:
      b = j.strip(".?!,")
      result.append(b)
  return result

print(list_of_words(words))

  
